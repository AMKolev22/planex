/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 mars.glb -t 
Author: Akshat (https://sketchfab.com/shooter24994)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/mars-9c7bbc64d8c74acfa9ec344c0fc10e1a
Title: Mars
*/
import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import type { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Sphere_Material002_0: THREE.Mesh;
  };
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('../../../public/mars.glb') as GLTFResult;

  // Assign texture to the material
  const texture = useRef<THREE.Texture>()
  const textureLoader = new THREE.TextureLoader()
  texture.current = textureLoader.load('../../../public/mars-texture.jpg')

  // Modify the material to include the texture
  const material = useRef<THREE.MeshStandardMaterial>()
  material.current = materials['Material.002'].clone() as THREE.MeshStandardMaterial
  material.current.map = texture.current
  material.current.metalness = 2


  return (
    <group {...props} dispose={null}>
      {/* Your lights */}
      <ambientLight intensity={0.5} />
      <directionalLight position={[5, 5, 5]} intensity={0.5} />
      <pointLight position={[10, 10, 10]} intensity={1} castShadow />

      {/* Render your mesh */}
      <mesh
        geometry={nodes.Sphere_Material002_0.geometry}
        material={material.current}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={1}
        position={[-20, 5, 0]}
      />
    </group>
  );
}

useGLTF.preload('../../../public/mars.glb');
